#!/usr/bin/perl -w

=pod

Pipe your configured grabber through B<tv_sort> to add stop time
Be sure to configure your other grabber before.

=cut

use strict;
#use decode;
use XMLTV;
use XMLTV::Options qw/ParseOptions/;
use XMLTV::Configure::Writer;
use Data::Dumper;
use Date::Manip;
use LWP::Simple;
use HTTP::Cookies;
use HTML::TreeBuilder;
use HTML::Entities;
use URI::Escape;


my $base_url = 'http://www.tele.at/programmvorschau.php'; 
#my $grabber = $default_grabber;
my $debug;
my( $opt, $conf ) = ParseOptions( { 
     grabber_name => "tv_grab_script",
     capabilities => [qw/baseline manualconfig/],
     stage_sub => \&config_stage,
     listchannels_sub => \&list_channels,
     version => '$Id: Grabber Wrapper,v 0.1 2010/11/09 00:01:45 Stif Exp ed $',
     description => "Pipe your configured grabber through 'tv_sort'",
} );


my $date = new Date::Manip::Date;
my $delta = $date->new_delta();
$date->parse("Today 05:00:00");   
$delta->parse("1 day later");
	
#$date = $date->calc($delta);
#my $timestamp = $date->printf('%s');

my $writer = new XMLTV::Writer();
#$writer->comment("Hello from XML::Writer's comment() method");
$writer->start({ 'generator-info-name' => 'Example code in pod' });
my %ch = (id => channel_id('orf1'), 'display-name' => [ [ 'ORF1', 'de' ] ]);
$writer->write_channel(\%ch);
#my %prog = (channel => %ch->attr('id'), start => xmltv_date($date), title => [ [ 'News', 'en' ] ]);
#$writer->write_programme(\%prog);
$writer->end();


## create our writer object
#my $writer = new XMLTV::Writer(%writer_args);
#$writer->start($head);

write_header();
write_channel_list();
#write_program();
write_footer();

my $is_success = 1;

     
if( $is_success ) {
     exit 0;
}
else {
     exit 1;
}



sub config_stage
{
     my( $stage, $conf ) = @_;
     #print STDERR $stage;
     # Sample stage_sub that only needs a single stage.
     die "Unknown stage $stage" if $stage ne "start";
     my $result = 0;
    
     return $result;
}

sub list_channels
{
     my( $conf, $opt ) = @_;
     my @args = ( "$conf->{'pipe-grabber'}->[0] --list-channels"  );
     my $str = system @args; 
     #print STDERR $str;
     return $str;
}

sub channel_id($) {  
    my $s = shift;
    return "$s.tele.at"
}

sub write_header {
	my ($conf, $opt) = @_;
     my $str = 0;	
     return $str;
}

sub write_channel_list {
	my ($conf, $opt) = @_;
	return 0;
}

sub write_program {
	my ($conf, $opt) = @_;
	
  my $date = new Date::Manip::Date;
	my $delta = $date->new_delta();
	$date->parse("Today 05:00:00");   
	my $err = $delta->parse("1 day later");	
	$date = $date->calc($delta);
	my $timestamp = $date->printf('%s');

	my $ua = LWP::UserAgent->new(keep_alive => 300);	
	$ua->cookie_jar(HTTP::Cookies->new());
	$ua->agent("xmltv/$XMLTV::VERSION");
	$ua->env_proxy;
	my $url = $base_url;

	my $tb = HTML::TreeBuilder->new();
	$url = "$base_url?tsstart=$timestamp&section=all&channels=ORF1";
	
	#my $req = HTTP::Request->new(GET => "$url");
	#$req->header('Accept' => 'text/html');
    
	#$tb->parse(($ua->request($req))->content) 
	#	or die "cannot parse content of $url"; ;    
	#$tb->eof;
	my $response = $ua->get($url);

	if ($response->is_success) {
		my $result = HTML::TreeBuilder->new_from_content($response->content);
		
		foreach my $program_block ($result->look_down('_tag' => 'td', 'class' => 'firstchild')) {
			foreach my $program ($program_block->look_down('_tag' => 'tr')) {
				my %show;
				my $lang = 'de';
				$show{channel} = channel_id('orf1');
				my $start = ($program->look_down('_tag' => 'td', 'class' => 'starttime'))->as_trimmed_text();
				my $end = ($program->right());
				if(defined($end)) { $end = ($end->look_down('_tag' => 'td', 'class' => 'starttime'))->as_trimmed_text();}
				#else {
				#	$end = ($program->look_down('_tag' => 'td', 'class' => 'starttime'))->look_down('_tag' => 'td', 'class' => 'starttime');
				#	if(defined($end)){$end->as_trimmed_text();}
					else{$end = '';}				
				#}		
				my $title = ($program->look_down('_tag' => 'a'))->as_text();
				my $episode = ($program->look_down('_tag' => 'span', 'class' => 'episode'));
				my $episodetitle = ($program->look_down('_tag' => 'span', 'class' => 'episodetitle'));
				my $genre = ($program->look_down('_tag' => 'span', 'class' => 'genre'))->as_text();
				my $country = ($program->look_down('_tag' => 'span', 'class' => 'produktionsland'));
				my $year = ($program->look_down('_tag' => 'span', 'class' => 'produktionsjahr'));
				
				if(defined($episode)){$episode = ($episode->as_text());}				
				else {$episode = '';}				
				
				if(defined($episodetitle)){$episodetitle = ($episodetitle->as_text());}				
				else {$episodetitle = '';}				

				if(defined($country)){$country = ($country->as_text());}				
				else {$country = '';}				

				if(defined($year)){$year = ($year->as_text());}				
				else {$year = '';}	
				
				$show{'start'} = xmltv_date($date,$start);			
				$show{'title'} = [[$title,$lang]];
				$show{'category'} = [[$genre,$lang]];
				$show{'end'} = xmltv_date($date,$end) if(length($end));
				$show{'episode-num'} = [ [$episode, 'onscreen' ] ] if(length($episode));        				
				$show{'sub-title'} = [[$episodetitle,$lang]] if(length($episodetitle));				
				$show{'country'} = [[$country]] if(length($episode));
				$show{'date'} = $year if(length($episode));
				
				#print Dumper %show;				
				$writer->write_programme(\%show);			
				#print Dumper "$start-$end $title $episode-$episodetitle|$genre|$country|$year";
				#print Dumper $program->as_HTML();
				#$debug = $program->as_HTML();
					
				}		
		}
	
	}
	return 0;
}

sub write_footer
{
	my ($conf, $opt) = @_;
	return 0;
}

sub xmltv_date {
	my ($date, $time) = @_;
	if(defined ($time)) {
		$date->parse_time($time);
	}
	my $result = $date->printf('%q %z'); 
  return $result;
}

=begin SAMPLE $program
'<tr><td class="starttime">04:25</td>
<td><h5><a href="detailansicht.php?sendungs_id=20789455">Navy CIS</a>
<span class="episode">(16)</span></h5><h6>
<span class="episodetitle">Wege zum Ruhm</span></h6>
<span class="genre">Krimiserie</span>
<span class="produktionsland">USA</span>
<span class="produktionsjahr">2004/2005</span></td></tr>
=end SAMPLE $program
